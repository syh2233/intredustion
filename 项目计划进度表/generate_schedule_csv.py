import csv

def create_project_schedule():
    # 项目数据 - 根据ESP32宿舍火灾报警系统项目计划进度表.md重新设计
    projects = [
        '立项', '立项', '硬件设计', '硬件设计', '硬件设计', '硬件设计', '硬件设计', '硬件设计',
        '软件设计', '软件设计', '软件设计', '软件设计', '软件设计', '软件设计',
        '硬件实现', '硬件实现', '软件实现', '软件实现',
        '硬件实现', '硬件实现', '软件实现', '软件实现', '软件实现',
        '硬件实现', '硬件实现', '软件实现', '软件实现', '软件实现',
        '系统测试', '系统测试', '软件设计', '软件设计',
        '系统测试', '系统测试', '系统测试', '文档编写', '文档编写', '项目交付', '项目交付',
        '项目交付', '项目交付'
    ]
    
    processes = [
        '课题调研', '技术调研', '硬件方案设计', '原理图设计', 'PCB布局设计', 'BOM表制作', '硬件测试准备', 'BOM表提交',
        '软件框架设计', '开发环境搭建', '数据库设计', 'API接口设计', '前端界面设计', '后端框架搭建',
        'PCB焊接组装', '传感器调试', 'API接口开发', '后端开发',
        'ESP32烧录测试', '硬件功能测试', '前端页面开发', '前后端联调', '系统集成测试',
        '硬件优化修改', '整体硬件调试', '软件bug修复', '算法优化', '性能优化',
        '系统联调', '传感器校准', '用户体验优化', '软件文档编写',
        '稳定性测试', '功耗测试', '硬件文档编写', '项目演示准备', '项目演示准备', '项目答辩', '项目答辩',
        '项目答辩', '项目答辩'
    ]
    
    # 计算总行数
    total_rows = len(projects)
    
    # 创建日期数据
    dates_data = {}
    date_columns = ['9/7', '9/8', '9/9', '9/10', '9/11', '9/12', '9/13', '9/14', 
                   '9/15', '9/16', '9/17', '9/18', '9/19', '9/20', '9/21', 
                   '9/22', '9/23', '9/24', '9/25', '9/26', '9/27', '9/28']
    
    # 初始化所有日期列为空
    for date in date_columns:
        dates_data[date] = [''] * total_rows
    
    # 设置具体任务分配 - 根据2024年9月实际日历
    # 9/7 (星期六): 项目启动
    dates_data['9/7'][0] = 'F'  # 立项-课题调研
    dates_data['9/7'][1] = 'A'  # 立项-技术调研
    
    # 9/12 (星期四): 硬件方案设计 + 软件框架设计 (4节课)
    dates_data['9/12'][2] = 'F'  # 硬件设计-硬件方案设计
    dates_data['9/12'][8] = 'A'  # 软件设计-软件框架设计
    
    # 9/13 (星期五): 硬件设计 + 软件开发 (8节课)
    dates_data['9/13'][3] = 'F'  # 硬件设计-原理图设计
    dates_data['9/13'][4] = 'F'  # 硬件设计-PCB布局设计
    dates_data['9/13'][5] = 'F'  # 硬件设计-BOM表制作
    dates_data['9/13'][9] = 'A'  # 软件设计-开发环境搭建
    dates_data['9/13'][10] = 'A'  # 软件设计-数据库设计
    dates_data['9/13'][11] = 'A'  # 软件设计-API接口设计
    
    # 9/14 (星期六): 硬件测试准备 + 软件前端设计 (8节课)
    dates_data['9/14'][6] = 'F'  # 硬件设计-硬件测试准备
    dates_data['9/14'][7] = 'F'  # 硬件设计-BOM表提交
    dates_data['9/14'][12] = 'A'  # 软件设计-前端界面设计
    dates_data['9/14'][13] = 'A'  # 软件设计-后端框架搭建
    
    # 9/15 (星期日): 硬件组装 + 软件后端开发 (8节课)
    dates_data['9/15'][14] = 'F'  # 硬件实现-PCB焊接组装
    dates_data['9/15'][15] = 'F'  # 硬件实现-传感器调试
    dates_data['9/15'][16] = 'A'  # 软件实现-API接口开发
    dates_data['9/15'][17] = 'A'  # 软件实现-后端开发
    
    # 9/20 (星期五): 硬件测试 + 软件前端 (4节课)
    dates_data['9/20'][18] = 'F'  # 硬件实现-ESP32烧录测试
    dates_data['9/20'][19] = 'F'  # 硬件实现-硬件功能测试
    dates_data['9/20'][20] = 'A'  # 软件实现-前端页面开发
    
    # 9/21 (星期六): 硬件优化 + 软件联调 (8节课)
    dates_data['9/21'][22] = 'F'  # 硬件实现-硬件优化修改
    dates_data['9/21'][23] = 'F'  # 硬件实现-整体硬件调试
    dates_data['9/21'][24] = 'A'  # 软件实现-前后端联调
    dates_data['9/21'][25] = 'A'  # 软件实现-系统集成测试
    dates_data['9/21'][26] = 'A'  # 软件实现-软件bug修复
    
    # 9/27 (星期五): 系统联调 + 算法优化 (4节课)
    dates_data['9/27'][28] = 'F'  # 系统测试-系统联调
    dates_data['9/27'][29] = 'F'  # 系统测试-传感器校准
    dates_data['9/27'][30] = 'A'  # 软件设计-算法优化
    dates_data['9/27'][31] = 'A'  # 软件设计-性能优化
    
    # 9/28 (星期六): 测试 + 文档 + 答辩 (8节课)
    dates_data['9/28'][32] = 'F'  # 系统测试-稳定性测试
    dates_data['9/28'][33] = 'F'  # 系统测试-功耗测试
    dates_data['9/28'][34] = 'F'  # 文档编写-硬件文档编写
    dates_data['9/28'][35] = 'A'  # 软件设计-用户体验优化
    dates_data['9/28'][36] = 'A'  # 文档编写-软件文档编写
    dates_data['9/28'][37] = 'F'  # 项目交付-项目演示准备
    dates_data['9/28'][38] = 'A'  # 项目交付-项目演示准备
    dates_data['9/28'][39] = 'F'  # 项目交付-项目答辩
    dates_data['9/28'][40] = 'A'  # 项目交付-项目答辩
    
    # 调试：检查所有数组长度
    print("调试信息：")
    print(f"projects长度: {len(projects)}")
    print(f"processes长度: {len(processes)}")
    for key in dates_data:
        print(f"{key}长度: {len(dates_data[key])}")
    
    # 创建CSV文件
    with open('ESP32项目计划进度表_修正版.csv', 'w', newline='', encoding='utf-8-sig') as csvfile:
        # 创建表头
        headers = ['项目', '工序', '时间'] + date_columns
        writer = csv.writer(csvfile)
        
        # 写入标题行
        title_row = ['项目进度表：（基于ESP32的宿舍火灾报警系统）'] + [''] * (len(headers) - 1)
        writer.writerow(title_row)
        
        # 写入空行
        writer.writerow([])
        
        # 写入时间行
        time_row = ['时间', '', '2024年9月7日-28日'] + [''] * (len(headers) - 3)
        writer.writerow(time_row)
        
        # 写入日期行
        date_header = ['项目', '工序', '时间'] + ['休', '休', '休', '休', '休', '休', '休', '休', '休', '休', '休', '休', '休', '休', '休', '休', '休', '休', '休', '休', '休', '休']
        writer.writerow(date_header)
        
        # 写入日期数字行 - 根据2024年9月实际日历
        date_numbers = ['', '', '', '日', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28']
        writer.writerow(date_numbers)
        
        # 写入数据行
        for i in range(total_rows):
            row = [
                projects[i],
                processes[i],
                '2024年9月'
            ]
            for date in date_columns:
                row.append(dates_data[date][i])
            writer.writerow(row)
        
        # 写入备注行
        note_row = ['注意: F=硬件工程师, A=软件工程师, 空白=无课或无任务'] + [''] * (len(headers) - 1)
        writer.writerow([])
        writer.writerow(note_row)
    
    print("CSV文件 'ESP32项目计划进度表_修正版.csv' 已生成成功！")
    print("请在当前目录查看生成的CSV文件，可以用Excel打开。")

if __name__ == "__main__":
    create_project_schedule()